/////////////////////////////////////////////////////////////
/** @mainpage ReleaseNote
<h2>版本历史记录</h2><hr/>
<h3>版本：V1.0.1，发布时间：2020/5/11</h3>
<p>适配环境：</p>
<ul>
    <li>硬件：蜂鸟M开发板</li>
    <li>软件：hb_m v3.0.5</li>
</ul>
<p> 修改记录：</p>
<ol>
    <li>二次开发章节中增加串口log打印说明</li>
</ol><hr/>
<h3>版本：V1.0.0，发布时间：2020/4/30</h3>
<p>适配环境：</p>
<ul>
    <li>硬件：蜂鸟M开发板</li>
    <li>软件：hb_m v3.0.1</li>
</ul>
<p> 修改记录：</p>
<ol>
    <li>第一版发布</li>
</ol><hr/>
*/
/**
@page jianjie 1、简介
@htmlinclude jianjie1.htm
*/
/**
@page chanpinshuoming 2、产品说明
@htmlinclude cpsm2.htm
*/
/**
@page huoquyuanma 3、获取源码
@htmlinclude hqym3.htm
*/
/**
@page shaolugujian 4、烧录固件
@htmlinclude slgj4.htm
*/
/**
@page dajiankaifahuanjing 5、搭建开发环境
@htmlinclude djkfhj5.htm
*/
/**
@page ruanjianjiagou 6、软件架构
@htmlinclude rjjg6.htm
*/
/**
@page ercikaifa 7、二次开发
@htmlinclude eckf7.htm
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_config_macro 配置宏定义
*配置宏定义参考user/inc/user_config.h
*/

/////////////////////////////////////////////////////////////
/** @defgroup uni_player 音频控制
*音频控制接口参考user/inc/user_player.h
*/

/** @defgroup uni_player_note 音频控制说明
* @ingroup uni_player
* @par 音频控制说明：
*
* 1. 可播放tools/scripts路径下的音频，文件名以序号区分
* 2. 调用播放接口是异步不堵塞的
* 3. @ref AUDIO_PLAY_TYPE 目前只支持AUDIO_PLAY_REPLY
*/

/** @defgroup uni_player_inf 音频控制接口
* @ingroup uni_player
*/

/** @defgroup uni_player_example 音频控制示例
* @ingroup uni_player
*/

/** @defgroup uni_player_example_1 hb_player.c
* @ingroup uni_player_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_PLAYER 运行示例程序 
* @include hb_player.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_asr 语音控制
*语音控制接口参考user/inc/user_asr.h
*/

/** @defgroup uni_asr_note 语音控制说明
* @ingroup uni_asr
* @par 语音控制说明:
*
* 1. 可控制语音识别工作模式的切换（仅识别唤醒词； 仅识别命令词）
* 2. 可控制语音识别功能的开关
* 3. 可控制禁用/启用特定的识别词
*/

/** @defgroup uni_asr_inf 语音控制接口
* @ingroup uni_asr
*/

/** @defgroup uni_asr_example 音频控制示例
* @ingroup uni_asr
*/

/** @defgroup uni_asr_example_1 hb_asr_control.c
* @ingroup uni_asr_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_ASR_CONTROL 运行示例程序
* @include hb_asr_control.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_communication 云知声标准协议数据通讯
*云知声标准协议数据通讯接口参考user/inc/user_uni_ucp.h
*/

/** @defgroup uni_communication_note 云知声标准协议数据通讯
* @ingroup uni_communication
* @par 云知声标准协议数据通讯说明:
*
* 1. 可通过定义user/inc/user_config.h中的宏@ref USE_UNIONE_PROTOCOL 设为1来启用此功能
*
* @par 协议说明:
*
* @htmlinclude uart_protocol.htm
*/

/** @defgroup uni_communication_inf 云知声标准协议数据通讯接口
* @ingroup uni_communication
*/

/** @defgroup uni_communication_example 云知声标准协议数据通讯示例
* @ingroup uni_communication
*/

/** @defgroup uni_communication_example_1 hb_uart_ucp.c
* @ingroup uni_communication_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_UART_UCP 运行示例程序
* @include hb_uart_ucp.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_flash 数据存储
*数据存储接口参考user/inc/user_flash.h
*/

/** @defgroup uni_flash_note 数据存储说明
* @ingroup uni_flash
* @par 数据存储说明:
*
* 1. 以key-value形式保存自定义值到flash中，常用于保存配置信息
* 2. 可用于该功能的空间为64k
*/

/** @defgroup uni_flash_inf 数据存储接口
* @ingroup uni_flash
*/

/** @defgroup uni_flash_example 数据存储示例
* @ingroup uni_flash
*/

/** @defgroup uni_flash_example_1 hb_flash_example.c
* @ingroup uni_flash_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_FLASH 运行示例程序
* @include hb_flash_example.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_uart 串口收发
*串口收发接口参考user/inc/user_uart.h
*/

/** @defgroup uni_uart_note 串口收发说明
* @ingroup uni_uart
* @par 串口收发说明:
*
* 1. 使用该功能需设置user/inc/user_config.h中的宏@ref USE_UNIONE_PROTOCOL 设为0
* 2. 串口透传收发
*/

/** @defgroup uni_uart_inf 串口收发接口
* @ingroup uni_uart
*/

/** @defgroup uni_uart_example 串口收发示例
* @ingroup uni_uart
*/

/** @defgroup uni_uart_example_1 hb_uart.c
* @ingroup uni_uart_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_UART 运行示例程序
* @include hb_uart.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_timer 定时器
*定时器接口参考user/inc/user_timer.h
*/

/** @defgroup uni_timer_note 定时器说明
* @ingroup uni_timer
* @par 定时器说明:
*
* 1. user/src/examples/drivers/user_sw_timer.c是基于一个硬件timer，配置成多个软定时器的示例，达到突破硬件timer个数限制的目的
* 2. user/src/user_timer.c为硬件定时器接口
*/

/** @defgroup uni_timer_inf 定时器接口
* @ingroup uni_timer
*/

/** @defgroup uni_timer_def 定时器类型定义
* @ingroup uni_timer
*/

/** @defgroup uni_timer_example 定时器示例
* @ingroup uni_timer
*/

/** @defgroup timer_example1 hb_sw_timers.c
@ingroup uni_timer_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_TIMERS 运行示例程序
@include hb_sw_timers.c
*/

/** @defgroup timer_example2 user_timer_buzzer.c
@ingroup uni_timer_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_BUZZER 运行示例程序
@include user_timer_buzzer.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_gpio GPIO
*GPIO接口参考user/inc/user_gpio.h
*/

/** @defgroup uni_gpio_note GPIO说明
* @ingroup uni_gpio
* @par GPIO说明:
*
* 1. 可配置gpio工作模式（pinmux）
* 2. 当为gpio功能时，可配置PD/PU, DIR, VALUE
* 3. 当为中断功能时，可注册中断回调函数@ref _gpio_interrupt_cb ， 设置中断方式@ref GPIO_INT_TYPE
*/

/** @defgroup uni_gpio_inf GPIO相关接口
* @ingroup uni_gpio
*/

/** @defgroup uni_gpio_def GPIO类型定义
* @ingroup uni_gpio
*/

/** @defgroup uni_gpio_example GPIO示例
* @ingroup uni_gpio
*/

/** @defgroup gpio_example1 hb_gpio_adc.c
@ingroup uni_gpio_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_ADC_CTRL 运行示例程序
@include hb_gpio_adc.c
*/

/** @defgroup gpio_example2 hb_gpio_key.c
@ingroup uni_gpio_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_KEY_WAKEUP 运行示例程序
@include hb_gpio_key.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_event Event事件
*Event事件接口参考user/inc/user_event.h
*/

/** @defgroup uni_event_note Event事件说明
*@ingroup uni_event
* @par Event事件说明:
*
* 1. 通过订阅指定的Event事件，来达到监听某种事件发生的目的。事件类型见@ref USER_EVENT_TYPE
*/

/** @defgroup uni_event_inf Event事件接口
*@ingroup uni_event
*/

/** @defgroup uni_event_def Event事件类型定义
*@ingroup uni_event
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_pwm PWM
*PWM接口参考user/inc/user_pwm.h
*/

/** @defgroup uni_pwm_note PWM说明
* @ingroup uni_pwm
* @par PWM说明:
*
* 1. 蜂鸟M平台使用TIMER3,TIMER4为PWM timer
* 2. PWM频率与系统时钟的分频比，取值范围[1, PWM_MAX_FREQ_DIV_VALUE]， PWM_MAX_FREQ_DIV_VALUE为（65535 << 15）
* 3. 默认下降沿计数，中断模式
*/

/** @defgroup uni_pwm_inf PWM相关接口
* @ingroup uni_pwm
*/

/** @defgroup uni_pwm_def PWM类型定义
* @ingroup uni_pwm
*/

/** @defgroup uni_pwm_example PWM示例
* @ingroup uni_pwm
*/

/** @defgroup uni_pwm_example1 hb_pwm_led.c
@ingroup uni_pwm_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_PWM_LED 运行示例程序
@include hb_pwm_led.c
*/
/////////////////////////////////////////////////////////////
/** @defgroup uni_example 方案示例
*示例代码位于目录user/src/examples/下
*/

/** @defgroup hb_smart_ac 智能电风扇
@ingroup uni_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_SMART_AC 运行示例程序
@include hb_smart_ac.c
*/

/** @defgroup hb_housekeeper 智能管家
@ingroup uni_example
* @par
* 
* 可通过定义user/inc/user_config.h中的宏@ref USER_RUN_DEMO_SELECT 为@ref USER_DEMO_HOUSEKEEPER 运行示例程序
@include hb_housekeeper.c
*/
